[
  {
    "id": "03b96ba2-4e02-4bac-aa27-45fb2f0a3978",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is a closure in JavaScript?",
    "back": "A closure is a function that has access to its outer function's variables, even after the outer function has returned. This allows for private variables and functions to be created, as well as for function factories and currying",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "NEW",
    "type": "CONCEPT",
    "created_at": "2023-04-13T17:59:52.893Z",
    "updated_at": "2023-04-13T17:59:52.894Z",
    "reviews": [],
    "tags": [
      { "id": "65e7193c-3117-4599-92a6-b6d9e79b277e" },
      { "id": "0935fc7c-93a6-4f26-9a90-fe4641b7d45c" }
    ]
  },
  {
    "id": "7e0da53c-0af9-4c0b-aabc-26fd6df3d591",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is the difference between a reference type and a value type in JavaScript?",
    "back": "In JavaScript, primitive data types like numbers and strings are value types, which means that their values are copied when they are assigned to a variable or passed as an argument to a function. Objects, arrays, and functions are reference types, which means that their values are not copied, but are instead passed by reference. This can lead to unexpected behavior when modifying reference types, as multiple variables can reference the same value.",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "NEW",
    "type": "CONCEPT",
    "created_at": "2023-04-13T17:59:52.893Z",
    "updated_at": "2023-04-13T17:59:52.894Z",
    "reviews": [],
    "tags": [{ "id": "3aa0e99d-4628-4044-9a1a-96bd67f360a5" }]
  },
  {
    "id": "051b3b53-e1d4-4634-b4b7-0619f8f3ca13",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is the this keyword in JavaScript?",
    "back": "The this keyword refers to the object that the function is a method of, or the global object if the function is not a method of any object. Its value can also be explicitly set using methods such as call() and apply().",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "NEW",
    "type": "CONCEPT",
    "created_at": "2023-04-13T17:59:52.893Z",
    "updated_at": "2023-04-13T17:59:52.894Z",
    "reviews": [],
    "tags": []
  },
  {
    "id": "0c1bf2f5-7789-47d0-8743-ac0b60e476aa",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is the difference between querySelector and getElementById in JavaScript?",
    "back": " querySelector is a method of the document object that returns the first element that matches a specified CSS selector. getElementById is a method of the document object that returns the element with the specified id attribute. querySelector can be used to select any element based on its attributes, while getElementById can only be used to select elements by their id attribute.",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "NEW",
    "type": "CONCEPT",
    "created_at": "2023-04-13T17:59:52.893Z",
    "updated_at": "2023-04-13T17:59:52.894Z",
    "reviews": [],
    "tags": [
      { "id": "404e5701-1814-42ed-bb80-5d6abe302b73" },
      { "id": "527d66ab-652f-4390-8220-15cfca0101e4" }
    ]
  },
  {
    "id": "0ebcb47a-3a7a-4aac-9f02-d9d8bd10453e",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What are JavaScript classes?",
    "back": "Classes are a new feature in JavaScript, introduced in ES6, that allow for the creation of reusable, modular code. Classes are essentially blueprints for creating objects, and can include properties and methods that define the object's behavior. Classes provide a more intuitive way to work with objects in JavaScript, and make it easier to create complex applications.",
    "ease_factor": 2.65,
    "interval": 4,
    "due_at": "2023-04-16T17:59:52.895Z",
    "status": "GRADUATED",
    "type": "CONCEPT",
    "created_at": "2023-02-17T18:59:52.895Z",
    "updated_at": "2023-02-17T18:59:52.895Z",
    "reviews": [{ "id": "b55b62d1-d9d9-4f23-b8bb-545acc48e730" }],
    "tags": [
      { "id": "36d51ef2-c069-4cdd-a548-9bc3b91382ea" },
      { "id": "9b6eb09f-89b8-4f63-81d7-0ea126927e6d" },
      { "id": "e8ca6a0c-4e97-44a7-884b-2cb857613235" }
    ]
  },
  {
    "id": "0ecabcc5-4b6d-4a32-b97b-66144d865b82",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is the difference between a for loop and a forEach loop?",
    "back": "A for loop is a traditional loop that allows you to iterate over an array or object, while a forEach loop is a method that is called on an array and iterates over its elements. For loops allow for more flexibility and control over the iteration process, while forEach loops provide a more concise syntax for simple iterations.",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "LEARNING",
    "type": "CONCEPT",
    "created_at": "2023-02-17T18:59:52.894Z",
    "updated_at": "2023-02-17T18:59:52.895Z",
    "reviews": [{ "id": "5af3d91a-8a6a-45ec-985a-569c1df86aed" }],
    "tags": [
      { "id": "3aa0e99d-4628-4044-9a1a-96bd67f360a5" },
      { "id": "2f337e73-7098-4320-9059-cee748b06a5f" }
    ]
  },
  {
    "id": "27e0361b-787d-4397-b63c-a8050d82f522",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is the difference between let and const in JavaScript?",
    "back": "In JavaScript, let is used to declare variables that can be reassigned new values, while const is used to declare variables whose value cannot be reassigned once it is initialized. This means that if you try to change the value of a const variable, you will get an error. Use let for variables whose values are expected to change during program execution, and use const for variables whose values are intended to remain constant.",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "NEW",
    "type": "CONCEPT",
    "created_at": "2023-04-13T17:59:52.893Z",
    "updated_at": "2023-04-13T17:59:52.894Z",
    "reviews": [],
    "tags": [
      { "id": "3aa0e99d-4628-4044-9a1a-96bd67f360a5" },
      { "id": "f63eed5d-6c10-4fe2-965b-fe57dea1f08d" }
    ]
  },
  {
    "id": "28feb7b2-3f71-43e4-97dd-32957d15281c",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is the difference between slice and splice in JavaScript?",
    "back": "slice and splice are both methods of arrays that are used to manipulate array values. slice returns a new array with a portion of the original array, based on the provided start and end indexes. splice changes the original array by adding or removing elements from the array, based on the provided start index and number of elements to remove.",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "NEW",
    "type": "CONCEPT",
    "created_at": "2023-04-13T17:59:52.893Z",
    "updated_at": "2023-04-13T17:59:52.894Z",
    "reviews": [],
    "tags": [{ "id": "f6b82579-1ce1-4740-aaa3-41b773392d5f" }]
  },
  {
    "id": "2b7c409d-43d0-4b2c-9c51-f715d0f7596b",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "Given an array arr of numbers, map each element of the array to its square and return a new array containing the squared elements.",
    "back": "function squareElements(arr) {\n               return arr.map((num) => num ** 2);\n                    }\n\n          The squareElements function takes an array arr as its input and uses the map method\n          to transform each element of the array into its square.\n          The arrow function (num) => num ** 2 calculates the square\n          of each number and returns the squared value. The resulting array with\n          squared elements is returned by the function.\n          The solution has a time complexity of O(n) because it only needs to iterate through the input array once\n          to map each element to its square, where n is the length of the input array.\n              ",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "NEW",
    "type": "EXERCISE",
    "created_at": "2023-04-13T17:59:52.894Z",
    "updated_at": "2023-04-13T17:59:52.894Z",
    "reviews": [],
    "tags": [{ "id": "f6b82579-1ce1-4740-aaa3-41b773392d5f" }]
  },
  {
    "id": "31864ce2-b1cf-4094-86b3-6dda3743d757",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is a higher-order function in JavaScript?",
    "back": "A higher-order function is a function that takes another function as an argument, or returns a function as its result. This allows for the creation of more flexible and reusable code, and is commonly used in JavaScript for functional programming. ",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "LEARNING",
    "type": "CONCEPT",
    "created_at": "2023-02-17T18:59:52.894Z",
    "updated_at": "2023-02-17T18:59:52.895Z",
    "reviews": [{ "id": "0e74f925-50c6-4b79-bd92-302e2dd4d1ae" }],
    "tags": [
      { "id": "65e7193c-3117-4599-92a6-b6d9e79b277e" },
      { "id": "95f5660f-0e0c-4aea-9f35-3f6fd33bf62e" }
    ]
  },
  {
    "id": "385c0fca-8ada-409a-955a-5bdeaa28144b",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is a JavaScript callback hell?",
    "back": "Callback hell is a term used to describe the problem of nested callbacks in asynchronous JavaScript code, which can make code difficult to read and maintain. Asynchronous code can lead to deeply nested callbacks, which can be hard to follow and debug. One solution to this problem is to use promises or async/await, which provide a more structured way to handle asynchronous code.",
    "ease_factor": 2.5,
    "interval": 8,
    "due_at": "2023-04-26T17:59:52.895Z",
    "status": "GRADUATED",
    "type": "CONCEPT",
    "created_at": "2023-02-17T18:59:52.895Z",
    "updated_at": "2023-02-17T18:59:52.895Z",
    "reviews": [
      { "id": "0211ec79-ea77-47cc-ab6e-3e922e8e3f88" },
      { "id": "0cd28946-6e4b-4cbd-8b4c-f59f7fe22d08" },
      { "id": "a4b549b1-3743-433c-a364-b13c8088e150" },
      { "id": "ba1dc9c5-647a-4c5a-9aee-0c2129992931" },
      { "id": "20f57da9-c5b4-496f-a3da-9280e7a58043" },
      { "id": "31afa766-6e56-4f48-99e9-bd72dc6851ef" }
    ],
    "tags": [{ "id": "4061c4ae-9b14-4d09-a79b-9c7b924fb4c4" }]
  },
  {
    "id": "4e48a08d-47d2-4a83-9824-125b500cea4b",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is the difference between a deep copy and a shallow copy in JavaScript?",
    "back": "In JavaScript, a deep copy creates a completely new object with its own memory space and copies all of the values from the original object, while a shallow copy creates a new object that shares some or all of the memory space with the original object. The main difference is that changes made to the original object after a shallow copy is made may affect the new object, while changes to the original object after a deep copy is made will not affect the new object.",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "NEW",
    "type": "CONCEPT",
    "created_at": "2023-04-13T17:59:52.893Z",
    "updated_at": "2023-04-13T17:59:52.894Z",
    "reviews": [],
    "tags": [{ "id": "e1042c70-70e7-4d46-8b37-48ad1dcef573" }]
  },
  {
    "id": "5afde341-55d7-47c9-a965-2825c538e5e9",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is a JavaScript module?",
    "back": "A module is a reusable piece of code that encapsulates related functionality and can be imported and exported in other parts of a JavaScript application. Modules provide a way to organize and modularize code, reducing complexity and improving maintainability. Modules were introduced in ES6 and can be defined using the import and export keywords.",
    "ease_factor": 2.5,
    "interval": 1,
    "due_at": "2023-04-19T17:59:52.895Z",
    "status": "GRADUATED",
    "type": "CONCEPT",
    "created_at": "2023-02-17T18:59:52.895Z",
    "updated_at": "2023-02-17T18:59:52.895Z",
    "reviews": [
      { "id": "90e551b8-ec1b-4ad3-af97-624ead772407" },
      { "id": "93b58bc7-6094-446a-a644-a843c812a534" }
    ],
    "tags": [
      { "id": "9b6eb09f-89b8-4f63-81d7-0ea126927e6d" },
      { "id": "79049a05-be7b-4f7e-8cde-fd0542b0d1e2" }
    ]
  },
  {
    "id": "647b2f6f-2da9-442c-a49a-d58abda145ce",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is event bubbling in JavaScript?",
    "back": "Event bubbling is the behavior in which an event triggered on an element is also triggered on all of its parent elements, up to the document level. This can cause unexpected behavior if not properly handled, but can also be useful in certain cases such as event delegation",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "NEW",
    "type": "CONCEPT",
    "created_at": "2023-04-13T17:59:52.893Z",
    "updated_at": "2023-04-13T17:59:52.894Z",
    "reviews": [],
    "tags": [{ "id": "404e5701-1814-42ed-bb80-5d6abe302b73" }]
  },
  {
    "id": "68889402-b166-4a94-a6b8-159710435b5c",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is a callback function in JavaScript?",
    "back": "A callback function is a function that is passed as an argument to another function, and is invoked inside the other function. Callback functions are commonly used in JavaScript to handle asynchronous code and event handling.",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "LEARNING",
    "type": "CONCEPT",
    "created_at": "2023-02-17T18:59:52.894Z",
    "updated_at": "2023-02-17T18:59:52.895Z",
    "reviews": [{ "id": "0e7e218b-dfc7-4b1d-a0a5-83473ae79ae5" }],
    "tags": [
      { "id": "4061c4ae-9b14-4d09-a79b-9c7b924fb4c4" },
      { "id": "65e7193c-3117-4599-92a6-b6d9e79b277e" }
    ]
  },
  {
    "id": "68c55fac-7f05-4ff5-814f-f86a2aa3345b",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is hoisting in JavaScript?",
    "back": "Hoisting is a JavaScript mechanism that allows variables and function declarations to be used before they are declared in the code. Function declarations are hoisted before variables, and variable assignments are not hoisted. It is generally considered good practice to declare variables before using them to avoid unexpected behavior.",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "LEARNING",
    "type": "CONCEPT",
    "created_at": "2023-02-17T18:59:52.894Z",
    "updated_at": "2023-02-17T18:59:52.895Z",
    "reviews": [{ "id": "1692c577-38a7-4b1e-8f18-85ba5ae9c06c" }],
    "tags": [
      { "id": "3aa0e99d-4628-4044-9a1a-96bd67f360a5" },
      { "id": "f63eed5d-6c10-4fe2-965b-fe57dea1f08d" }
    ]
  },
  {
    "id": "69a4889e-131c-464c-8e3d-2593bfe8bf3c",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is the difference between null and undefined in JavaScript?",
    "back": "null is an intentional absence of any object value, while undefined means a variable has been declared but has not been assigned a value. null is a value, while undefined is a type. In most cases, null and undefined can be used interchangeably.",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "LEARNING",
    "type": "CONCEPT",
    "created_at": "2023-02-17T18:59:52.894Z",
    "updated_at": "2023-02-17T18:59:52.895Z",
    "reviews": [{ "id": "9aeee8d0-5848-4844-8214-e46ecb5ef6ac" }],
    "tags": [
      { "id": "3aa0e99d-4628-4044-9a1a-96bd67f360a5" },
      { "id": "47fb1fec-3269-4e0f-ae6a-02cc4148a688" },
      { "id": "f63eed5d-6c10-4fe2-965b-fe57dea1f08d" }
    ]
  },
  {
    "id": "76606096-e691-49fa-b9a6-2ffee7b45cc7",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is a callback function in javascript?",
    "back": "In JavaScript, a callback function is a function that is passed as an argument to another function and is executed when that function finishes its task.",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "NEW",
    "type": "CONCEPT",
    "created_at": "2023-04-13T17:59:52.893Z",
    "updated_at": "2023-04-13T17:59:52.894Z",
    "reviews": [],
    "tags": [{ "id": "65e7193c-3117-4599-92a6-b6d9e79b277e" }]
  },
  {
    "id": "96368f1b-4935-4240-862d-536e121acfe3",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is the difference between an arrow function and a regular function in JavaScript?",
    "back": "An arrow function is a shorthand syntax for creating a function expression in JavaScript. Arrow functions are shorter and have an implicit return statement, which means they can be more concise than regular functions. Arrow functions also have a this value that is inherited from the surrounding context, whereas regular functions have a this value that is dependent on how the function is called.",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "NEW",
    "type": "CONCEPT",
    "created_at": "2023-04-13T17:59:52.893Z",
    "updated_at": "2023-04-13T17:59:52.894Z",
    "reviews": [],
    "tags": [{ "id": "65e7193c-3117-4599-92a6-b6d9e79b277e" }]
  },
  {
    "id": "9e59b7cf-7161-48dd-aa9f-d34109c1f9f5",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is the difference between a named export and a default export in JavaScript modules?",
    "back": "In JavaScript modules, a named export is a specific function or variable that is exported from a module and can be imported using its exact name, while a default export is the primary function or value that is exported from a module and can be imported using any name. A module can have multiple named exports and only one default export. Named exports are useful for exporting specific functionality, while default exports are useful for exporting the primary functionality of a module.",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "NEW",
    "type": "CONCEPT",
    "created_at": "2023-04-13T17:59:52.893Z",
    "updated_at": "2023-04-13T17:59:52.894Z",
    "reviews": [],
    "tags": [{ "id": "79049a05-be7b-4f7e-8cde-fd0542b0d1e2" }]
  },
  {
    "id": "a70ce196-d14d-4601-9769-cf7faf8532a6",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "Given an array arr of strings, write a function filterWords that takes in the array\n      and a callback function checkWord as arguments.\n      The checkWord function should take in a string as input and return a boolean\n      indicating whether the string should be included in the filtered array or not.\n      The filterWords function should return a new array that contains only the strings\n      that pass the check performed by the checkWord callback function.",
    "back": "function filterWords(arr, checkWord) {\n            const filteredWords = [];\n         for (let i = 0; i < arr.length; i++) {\n          if (checkWord(arr[i])) {\n            filteredWords.push(arr[i]);\n          }\n        }\n        return filteredWords;\n      }\n\n        The filterWords function takes an array arr and a callback function checkWord as its inputs.\n        The function initializes an empty array filteredWords that will hold the words that pass the check performed by the checkWord callback function.\n        The function then iterates through each element of the input array arr using a for loop.\n        For each element, the function calls the checkWord callback function with the element\n        as input to check whether the element should be included in the filtered array or not.\n        If the checkWord function returns true, the element is added to the filteredWords array using the push method.\n        Finally, the filterWords function returns the filteredWords array that contains only the words that pass\n        the check performed by the checkWord callback function.\n        The solution has a time complexity of O(n) because it needs to iterate through the input array once, where n is the length of the input array.\n              ",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "NEW",
    "type": "EXERCISE",
    "created_at": "2023-04-13T17:59:52.894Z",
    "updated_at": "2023-04-13T17:59:52.894Z",
    "reviews": [],
    "tags": [{ "id": "65e7193c-3117-4599-92a6-b6d9e79b277e" }]
  },
  {
    "id": "ac80a129-478b-4a06-93cc-ae79665d9d9d",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is a promise in JavaScript?",
    "back": "A promise is a special object in JavaScript that represents the eventual completion or failure of an asynchronous operation, and allows for easier handling of asynchronous code using the then() and catch() methods.",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "NEW",
    "type": "CONCEPT",
    "created_at": "2023-04-13T17:59:52.893Z",
    "updated_at": "2023-04-13T17:59:52.894Z",
    "reviews": [],
    "tags": [{ "id": "4061c4ae-9b14-4d09-a79b-9c7b924fb4c4" }]
  },
  {
    "id": "b475aeaa-0a4d-4e94-9e87-a22997c437d4",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is object destructuring in JavaScript?",
    "back": "Object destructuring is a feature in JavaScript that allows for extracting properties of an object and assigning them to variables with the same name. This can make code more concise and readable, and is especially useful when dealing with complex objects",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "NEW",
    "type": "CONCEPT",
    "created_at": "2023-04-13T17:59:52.893Z",
    "updated_at": "2023-04-13T17:59:52.894Z",
    "reviews": [],
    "tags": [
      { "id": "9b6eb09f-89b8-4f63-81d7-0ea126927e6d" },
      { "id": "e1042c70-70e7-4d46-8b37-48ad1dcef573" }
    ]
  },
  {
    "id": "c82a9ea4-c048-4743-84c7-3d0aca1a1009",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is the event loop in JavaScript?",
    "back": "The event loop is a core concept in JavaScript that manages the execution of asynchronous code. It is responsible for queuing and executing callback functions, and it ensures that JavaScript's single-threaded nature is maintained while still allowing for asynchronous operations.",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "LEARNING",
    "type": "CONCEPT",
    "created_at": "2023-02-17T18:59:52.894Z",
    "updated_at": "2023-02-17T18:59:52.895Z",
    "reviews": [{ "id": "9a9d80a5-e654-48be-8eea-24680d65062b" }],
    "tags": [
      { "id": "4061c4ae-9b14-4d09-a79b-9c7b924fb4c4" },
      { "id": "3aa0e99d-4628-4044-9a1a-96bd67f360a5" }
    ]
  },
  {
    "id": "d3a32064-ad1b-4a15-abf7-6583cfff04fe",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is the difference between innerHTML and textContent in JavaScript?",
    "back": "The innerHTML property in JavaScript is used to get or set the HTML content of an element, while textContent is used to get or set the text content of an element. The main difference is that innerHTML can include HTML tags and attributes, while textContent only includes the text content of an element. When setting the content of an element, it is generally safer to use textContent to prevent injection attacks.",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "NEW",
    "type": "CONCEPT",
    "created_at": "2023-04-13T17:59:52.893Z",
    "updated_at": "2023-04-13T17:59:52.894Z",
    "reviews": [],
    "tags": [{ "id": "527d66ab-652f-4390-8220-15cfca0101e4" }]
  },
  {
    "id": "d537a64d-cf6e-4040-b8db-580db6183b2d",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is a JavaScript constructor function?",
    "back": "A constructor function is a special type of function that is used to create objects in JavaScript. It's called with the 'new' keyword and returns a new object instance. Constructor functions define the properties and methods of the object being created, and can also take arguments to customize the object's behavior. Constructor functions are often used in object-oriented programming to create new instances of a class.",
    "ease_factor": 2.65,
    "interval": 10,
    "due_at": "2023-04-22T17:59:52.895Z",
    "status": "GRADUATED",
    "type": "CONCEPT",
    "created_at": "2023-02-17T18:59:52.895Z",
    "updated_at": "2023-02-17T18:59:52.895Z",
    "reviews": [
      { "id": "71afbf8e-c7ec-4c68-b2e2-5f16429caa65" },
      { "id": "0c17c998-a22d-4e21-a199-0a0c8ec3fc77" },
      { "id": "c90c0173-dea8-45a2-bd37-421a3c0d8059" },
      { "id": "a666e2d4-e846-46f8-bdc1-881796ac724e" }
    ],
    "tags": [{ "id": "36d51ef2-c069-4cdd-a548-9bc3b91382ea" }]
  },
  {
    "id": "db3584b4-8979-4497-b432-e21bcab62c78",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is the difference between synchronous and asynchronous JavaScript?",
    "back": "Synchronous JavaScript executes code in a blocking manner, meaning that one line of code must finish executing before the next line can be executed. Asynchronous JavaScript allows multiple lines of code to execute at the same time, and it utilizes callback functions, promises, and async/await to manage the asynchronous code flow.",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "LEARNING",
    "type": "CONCEPT",
    "created_at": "2023-02-17T18:59:52.894Z",
    "updated_at": "2023-02-17T18:59:52.895Z",
    "reviews": [{ "id": "a23d78a4-1ed8-4ab9-b421-18fab19a1f96" }],
    "tags": [
      { "id": "4061c4ae-9b14-4d09-a79b-9c7b924fb4c4" },
      { "id": "3aa0e99d-4628-4044-9a1a-96bd67f360a5" }
    ]
  },
  {
    "id": "f1bfed6f-df5e-4cf3-ba75-cee82e6c849d",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is a JavaScript event?",
    "back": "An event is a signal that something has happened in a web page or application, such as a mouse click, a keypress, or a page load. JavaScript can be used to respond to these events by executing code or changing the page's behavior. Event listeners are used to detect and handle events in JavaScript.",
    "ease_factor": 2.5,
    "interval": 1,
    "due_at": "2023-04-19T17:59:52.895Z",
    "status": "GRADUATED",
    "type": "CONCEPT",
    "created_at": "2023-02-17T18:59:52.895Z",
    "updated_at": "2023-02-17T18:59:52.895Z",
    "reviews": [
      { "id": "dbabb9e7-e180-4096-8e93-acd8c9e2f7f6" },
      { "id": "90990727-9d8c-4787-86d6-a7756afc8ba4" }
    ],
    "tags": [
      { "id": "527d66ab-652f-4390-8220-15cfca0101e4" },
      { "id": "7d803678-4d8e-46a6-8e73-d2972ccf1ae5" }
    ]
  },
  {
    "id": "f5706c05-7541-4fae-be33-a26ad1737a5a",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is the DOM in JavaScript?",
    "back": "The Document Object Model (DOM) is a programming interface for web documents. It represents the page so that programs can change the document structure, style, and content. With the DOM, JavaScript can access and modify all the elements of an HTML document.",
    "ease_factor": 2.5,
    "interval": 3,
    "due_at": "2023-04-18T17:59:52.895Z",
    "status": "GRADUATED",
    "type": "CONCEPT",
    "created_at": "2023-02-17T18:59:52.895Z",
    "updated_at": "2023-02-17T18:59:52.895Z",
    "reviews": [
      { "id": "d0c50888-1916-49aa-ac63-315b3272eaf5" },
      { "id": "75d4f1ac-2a25-4579-a0ba-c0ade878c9ad" },
      { "id": "739e6602-299b-4ab9-8bd0-69deb35f8a3c" }
    ],
    "tags": [{ "id": "404e5701-1814-42ed-bb80-5d6abe302b73" }]
  },
  {
    "id": "f5d4e3b7-5987-4dcd-924e-da6272e5460f",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is the difference between a JavaScript function declaration and a function expression?",
    "back": "A function declaration is a statement that declares a function and assigns it to a variable or property of an object. Function declarations are hoisted and can be used before they are declared. A function expression is an expression that defines a function and assigns it to a variable or property of an object. Function expressions are not hoisted and cannot be used before they are declared.",
    "ease_factor": 2.5,
    "interval": 1,
    "due_at": "2023-04-12T17:59:52.895Z",
    "status": "GRADUATED",
    "type": "CONCEPT",
    "created_at": "2023-02-17T18:59:52.895Z",
    "updated_at": "2023-02-17T18:59:52.895Z",
    "reviews": [
      { "id": "08bd294d-2152-44fb-959b-5fa921109a3c" },
      { "id": "f59758b6-f944-48b3-8924-1589604ec4df" }
    ],
    "tags": [{ "id": "65e7193c-3117-4599-92a6-b6d9e79b277e" }]
  },
  {
    "id": "f768cb7e-d7ee-4bcb-be24-9b140263a887",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is the difference between == and === in JavaScript?",
    "back": "== is the loose equality operator, and performs type coercion before comparing two values,\n       while ===       is the strict equality operator and does not perform any type coercion.\n       It is generally recommended to use === for equality comparisons in JavaScript.",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "NEW",
    "type": "CONCEPT",
    "created_at": "2023-04-13T17:59:52.893Z",
    "updated_at": "2023-04-13T17:59:52.894Z",
    "reviews": [],
    "tags": [{ "id": "3aa0e99d-4628-4044-9a1a-96bd67f360a5" }]
  },
  {
    "id": "fba819bf-47d6-4464-be1f-361cc1bb3044",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What is an Event Handler in JavaScript?",
    "back": "An event handler is a function in JavaScript that is triggered when an event occurs, such as a user clicking a button. Event handlers are used to perform actions in response to user input, such as changing the content of a web page or submitting a form. They are essential for creating interactive web pages and are used extensively in frontend development.",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "NEW",
    "type": "CONCEPT",
    "created_at": "2023-04-13T17:59:52.893Z",
    "updated_at": "2023-04-13T17:59:52.894Z",
    "reviews": [],
    "tags": [
      { "id": "527d66ab-652f-4390-8220-15cfca0101e4" },
      { "id": "8b4d0c67-cd76-4363-ae94-bf69e273877c" }
    ]
  },
  {
    "id": "fd014696-8245-437a-af4f-1eaa51b85a21",
    "topicId": "8e3399e6-1d94-11ec-9621-0242ac130002",
    "front": "What are Arrow Functions in JavaScript?",
    "back": "Arrow functions are a shorthand syntax for defining functions in JavaScript. They are similar to traditional functions, but with a few differences. Arrow functions have a concise syntax that allows them to be defined in a single line of code, and they have a lexical this binding, which means that the value of this inside an arrow function is determined by its surrounding scope. Arrow functions are commonly used in JavaScript for their brevity and readability.",
    "ease_factor": null,
    "interval": null,
    "due_at": null,
    "status": "NEW",
    "type": "CONCEPT",
    "created_at": "2023-04-13T17:59:52.893Z",
    "updated_at": "2023-04-13T17:59:52.894Z",
    "reviews": [],
    "tags": [{ "id": "65e7193c-3117-4599-92a6-b6d9e79b277e" }]
  }
]
